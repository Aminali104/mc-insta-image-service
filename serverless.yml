service: image-upload-service

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1  # Region is set here, no need to add it in environment variables
  environment:
    # AWS credentials are managed by AWS CLI, no need to include them here
    # AWS_DEFAULT_REGION removed
  
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::mc-image-insta-uploaders/images/*"
        - "arn:aws:s3:::mc-image-insta-uploaders/*"  # In case you want to grant permission for all objects in the bucket
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:Scan"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:us-east-1:061039779923:table/ImagesMetadata"  # Replace with your DynamoDB table ARN


functions:
  uploadImage:
    handler: src.upload_image.upload_image
    events:
      - http:
          path: upload
          method: post
  listImages:
    handler: src.list_images.list_images
    events:
      - http:
          path: images
          method: get
  viewImage:
    handler: src.view_image.view_image
    events:
      - http:
          path: images/{image_id}
          method: get
  deleteImage:
    handler: src.delete_image.delete_image
    events:
      - http:
          path: images/{image_id}
          method: delete

resources:
  Resources:
    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: mc-image-insta-uploaders
    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ImagesMetadata
        AttributeDefinitions:
          - AttributeName: ImageID
            AttributeType: S
        KeySchema:
          - AttributeName: ImageID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
